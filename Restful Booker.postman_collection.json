{
	"info": {
		"_postman_id": "c9686c39-10cb-4b1e-84dd-df270688918d",
		"name": "Restful Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ping",
			"item": [
				{
					"name": "Health Check",
					"item": [
						{
							"name": "Ping to api url to check health",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea83e673-790d-40ba-a6f3-e20998d09e3b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/ping",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"ping"
									]
								},
								"description": "This test case will check whether the api endpoint is up and running or not. If running, the Status code should be 201,Body should matches string: \"created\" and Status code name should have string: \"created\"\r\n\r\nFor best practice: If api is running status code should be 200 , status code name should have string: \"OK\"\r\nFor best practice: If api is not running status code should be 503  and status code name should have string: \"Service Unavailable\"\r\n\r\nIf the api is not up and running, then all furhter test should be cancelled. This funtions should be written here."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26b9312e-048d-4195-86ee-26e1f6bf8cc4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a1401f92-9563-4c7a-bf5a-5282454672e8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create Token",
			"item": [
				{
					"name": "Create Token using POST request with correct username and correct password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d2b3405-78da-43ac-93c4-03a4526331aa",
								"exec": [
									"pm.test(\"Status code is 200 for successful token creation\", function () {\r",
									"    pm.response.to.have.status(200); \r",
									"    });\r",
									"pm.test(\"Status phrase is: OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"pm.test(\"Body matches string: token\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"var body = JSON.parse(responseBody); \r",
									"pm.environment.set(\"token\", body.token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						},
						"description": "This test case will generate a valid token for correct username and correct password. Also in this test case the token is set to Environment\r\nVariable to use for future test cases."
					},
					"response": []
				},
				{
					"name": "Create Token using POST request with wrong username and wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d21386a-5056-4185-bca8-6ee66a9364cd",
								"exec": [
									"pm.test(\"For wrong username and wrong password, the response body contains: Bad credentials\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin1\",\r\n    \"password\" : \"password1231\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						},
						"description": "This test case will request with wrong username and wrong password and  return \"Bad credentials\" in response body."
					},
					"response": []
				},
				{
					"name": "Create Token using POST request with wrong username and correct password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50ecba65-0bb6-4ce0-b718-d40c98d2cf72",
								"exec": [
									"pm.test(\"For wrong username and correct password, the response body contains: Bad credentials\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin1\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						},
						"description": "This test case will request with wrong username and correct password and return \"Bad credentials\" in response body."
					},
					"response": []
				},
				{
					"name": "Create Token using POST request with correct username and wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5aa057a-0f65-4361-8a19-fd9eb2e37053",
								"exec": [
									"pm.test(\"For correct username and wrong password, the response body contains: Bad credentials\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123212\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						},
						"description": "This test case will request with correct username and wrong password and return \"Bad credentials\" in response body."
					},
					"response": []
				},
				{
					"name": "Create Token using POST request with empty username and  empty password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b43798af-93ce-455c-a720-142e3d9aa6e5",
								"exec": [
									"pm.test(\"For empty username and empty password, the response body contains: Bad credentials\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"\",\r\n    \"password\" : \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						},
						"description": "This case will check the behaviour if provide empty username and empty password to the url.It will return \"bad credentials\" in response."
					},
					"response": []
				},
				{
					"name": "Create Token using POST request with empty username and correct password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f99edd4c-b0d9-44a2-9339-82f9690b175d",
								"exec": [
									"pm.test(\"For empty username and correct password, the response body contains: Bad credentials\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						},
						"description": "This test case will request with empty username and correct password and return \"Bad credentials\" in response body."
					},
					"response": []
				},
				{
					"name": "Create Token using POST request with correct username and empty password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b65e22d3-053b-49f2-a895-88668097866b",
								"exec": [
									"pm.test(\"For correct username and empty password, the response body contains: Bad credentials\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						},
						"description": "This test case will request with correct username and empty password and return \"Bad credentials\" in response body."
					},
					"response": []
				},
				{
					"name": "Create Token using post request with wrong url with correct username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1267cae1-6c66-45bd-9531-c4287d7173e9",
								"exec": [
									"pm.test(\"For wrong authorization url the status code is: 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response body contains: Not Found\", function () {\r",
									"    pm.response.to.have.body(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Status phrase string contains: Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/qwq",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"qwq"
							]
						},
						"description": "This test case will request with wrong url with correct username and password and return 404 Not Found"
					},
					"response": []
				},
				{
					"name": "Get Booking Ids with checkout format: DD.MM.CCYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbaedf94-f97e-4621-8308-246474414f69",
								"exec": [
									"pm.test(\"Response body should contain: invalidCheckoutData\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"invalidCheckoutData\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking?checkout=22.02.2018",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkout",
									"value": "22.02.2018"
								}
							]
						},
						"description": "This test case will send GET request with invalid checkout format.Checkout data will be sent in DD.MM.CCYY format. So the request should not return any booking id and need proper error response."
					},
					"response": []
				}
			],
			"description": "This test set covers all possible test of authorization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "51015e51-cce7-4553-a9fd-c6079c731fed",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2108c1f0-6dd4-4f97-9afd-81018099fef5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Create Booking",
					"item": [
						{
							"name": "Create Booking with all valid body parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf3bb36e-608c-4d04-adf2-33502f966751",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"bookingid\": 22,\r",
											"            \"booking\": {\r",
											"                \"firstname\": \"Jhon\",\r",
											"                \"lastname\": \"wick\",\r",
											"                \"totalprice\": 110,\r",
											"                \"depositpaid\": true,\r",
											"                \"bookingdates\": {\r",
											"                    \"checkin\": \"2018-02-02\",\r",
											"                    \"checkout\": \"2019-04-04\"\r",
											"                },\r",
											"                \"additionalneeds\": \"Breakfast\"\r",
											"            }\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"bookingid\",\r",
											"        \"booking\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"bookingid\": {\r",
											"            \"$id\": \"#/properties/bookingid\",\r",
											"            \"type\": \"integer\",\r",
											"            \"title\": \"The bookingid schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": 0,\r",
											"            \"examples\": [\r",
											"                22\r",
											"            ]\r",
											"        },\r",
											"        \"booking\": {\r",
											"            \"$id\": \"#/properties/booking\",\r",
											"            \"type\": \"object\",\r",
											"            \"title\": \"The booking schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": {},\r",
											"            \"examples\": [\r",
											"                {\r",
											"                    \"firstname\": \"Jhon\",\r",
											"                    \"lastname\": \"wick\",\r",
											"                    \"totalprice\": 110,\r",
											"                    \"depositpaid\": true,\r",
											"                    \"bookingdates\": {\r",
											"                        \"checkin\": \"2018-02-02\",\r",
											"                        \"checkout\": \"2019-04-04\"\r",
											"                    },\r",
											"                    \"additionalneeds\": \"Breakfast\"\r",
											"                }\r",
											"            ],\r",
											"            \"required\": [\r",
											"                \"firstname\",\r",
											"                \"lastname\",\r",
											"                \"totalprice\",\r",
											"                \"depositpaid\",\r",
											"                \"bookingdates\",\r",
											"                \"additionalneeds\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"firstname\": {\r",
											"                    \"$id\": \"#/properties/booking/properties/firstname\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The firstname schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"Jhon\"\r",
											"                    ]\r",
											"                },\r",
											"                \"lastname\": {\r",
											"                    \"$id\": \"#/properties/booking/properties/lastname\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The lastname schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"wick\"\r",
											"                    ]\r",
											"                },\r",
											"                \"totalprice\": {\r",
											"                    \"$id\": \"#/properties/booking/properties/totalprice\",\r",
											"                    \"type\": \"integer\",\r",
											"                    \"title\": \"The totalprice schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": 0,\r",
											"                    \"examples\": [\r",
											"                        110\r",
											"                    ]\r",
											"                },\r",
											"                \"depositpaid\": {\r",
											"                    \"$id\": \"#/properties/booking/properties/depositpaid\",\r",
											"                    \"type\": \"boolean\",\r",
											"                    \"title\": \"The depositpaid schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": false,\r",
											"                    \"examples\": [\r",
											"                        true\r",
											"                    ]\r",
											"                },\r",
											"                \"bookingdates\": {\r",
											"                    \"$id\": \"#/properties/booking/properties/bookingdates\",\r",
											"                    \"type\": \"object\",\r",
											"                    \"title\": \"The bookingdates schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": {},\r",
											"                    \"examples\": [\r",
											"                        {\r",
											"                            \"checkin\": \"2018-02-02\",\r",
											"                            \"checkout\": \"2019-04-04\"\r",
											"                        }\r",
											"                    ],\r",
											"                    \"required\": [\r",
											"                        \"checkin\",\r",
											"                        \"checkout\"\r",
											"                    ],\r",
											"                    \"properties\": {\r",
											"                        \"checkin\": {\r",
											"                            \"$id\": \"#/properties/booking/properties/bookingdates/properties/checkin\",\r",
											"                            \"type\": \"string\",\r",
											"                            \"title\": \"The checkin schema\",\r",
											"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                            \"default\": \"\",\r",
											"                            \"examples\": [\r",
											"                                \"2018-02-02\"\r",
											"                            ]\r",
											"                        },\r",
											"                        \"checkout\": {\r",
											"                            \"$id\": \"#/properties/booking/properties/bookingdates/properties/checkout\",\r",
											"                            \"type\": \"string\",\r",
											"                            \"title\": \"The checkout schema\",\r",
											"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                            \"default\": \"\",\r",
											"                            \"examples\": [\r",
											"                                \"2019-04-04\"\r",
											"                            ]\r",
											"                        }\r",
											"                    },\r",
											"                    \"additionalProperties\": true\r",
											"                },\r",
											"                \"additionalneeds\": {\r",
											"                    \"$id\": \"#/properties/booking/properties/additionalneeds\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The additionalneeds schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"Breakfast\"\r",
											"                    ]\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": true\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  pm.expect(tv4.validate(body, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"firstname\", body.booking.firstname);\r",
											"pm.environment.set(\"lastname\", body.booking.lastname);\r",
											"pm.environment.set(\"checkin\", body.booking.bookingdates.checkin);\r",
											"pm.environment.set(\"checkout\", body.booking.bookingdates.checkout);\r",
											"pm.environment.set(\"id\", body.bookingid);\r",
											"\r",
											"pm.test(\"For successfully booking creation the response body contains: bookingid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingid\");\r",
											"});\r",
											"pm.test(\"For successfully booking creation the response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For successfully booking creation the response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For successfully booking creation the response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For successfully booking creation the response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For successfully booking creation the response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For successfully booking creation the response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For successfully booking creation the response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 110,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-10\",\r\n        \"checkout\" : \"2019-12-12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will create an appropriate booking and return response body with all the provided value along with new booking id.\r\nAfter executing this test case, firstname, lastname, checkin, cehckout and bookingid are set to environment variable to use for furhter test cases."
							},
							"response": []
						},
						{
							"name": "Create Booking with all empty body parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30d065a2-8c80-4af9-97a0-9f5fff6337c4",
										"exec": [
											"pm.test(\"For all empty body parameter, response status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For all empty body parameter, response body contains: Bad Request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For all empty body parameter, response phrase is: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"\",\r\n    \"lastname\" : \"\",\r\n    \"totalprice\" : ,\r\n    \"depositpaid\" : ,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"additionalneeds\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "In this test the request will be sent with all empty body parameters. So there need proper error response."
							},
							"response": []
						},
						{
							"name": "Create Booking with large string in firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1524050-cc81-463d-8772-9922de721e95",
										"exec": [
											"pm.test(\"For large input in firstname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For large input in firstname, the status phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For large input in firstname, response should contain: firstnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstnameInvalid\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael Ethan Michael \",\r\n    \"lastname\" : \"Jhonson\",\r\n    \"totalprice\" : 400,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-09-09\",\r\n        \"checkout\" : \"2019-01-06\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "In this test the request will be sent with large string in firstname parameter but all other parameter values are perfect. This test should fail and return proper error message for incorrect validation in firstname field."
							},
							"response": []
						},
						{
							"name": "Create Booking with special character as input in firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f2b8ca9-c48c-4e2a-8c75-27b93f4ca4bf",
										"exec": [
											"pm.test(\"If provide only special characters in firstname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"If provide only special characters in firstname, the status phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"If provide only special characters in firstname, response should contain: firstnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstnameInvalid\");\r",
											"});\r",
											"\r",
											"//any name field should allow few special characters like space, dot, hyphen and apostrophe"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"#######################!¤%&/()=[]{}\",\r\n    \"lastname\" : \"Jhonson\",\r\n    \"totalprice\" : 400,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-09-09\",\r\n        \"checkout\" : \"2019-01-06\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send booking create request with special characters in firstname body parameter. The other parameter values are ok. In that case the test case should fail and proper error message should be found for validation problem in firstname field.Any name field should allow few special characters like space, dot, hyphen and apostrophe."
							},
							"response": []
						},
						{
							"name": "Create Booking with large string in lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11f19ad5-6bd4-45a0-bbba-ea250dd06897",
										"exec": [
											"pm.test(\"For large input in lastname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For large input in lastname, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For large input in lastname, response should contain: lastnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastnameInvalid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Ethan\",\r\n    \"lastname\" : \"Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson Jhonson\",\r\n    \"totalprice\" : 400,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-09-09\",\r\n        \"checkout\" : \"2019-01-06\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "In this test the request will be sent with large string in lastname parameter but all other parameter values are perfect. This test should fail and return proper error message for incorrect validation in lastname field."
							},
							"response": []
						},
						{
							"name": "Create Booking with special character as input in lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b2dc6dd-66d9-4529-ab02-ce6f7793c4b1",
										"exec": [
											"pm.test(\"If provide only special characters in lastname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"If provide only special characters in lastname, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"If provide only special characters in lastname, response should contain: lastnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastnameInvalid\");\r",
											"});\r",
											"\r",
											"//any name field should allow few special characters like space, dot, hyphen and apostrophe"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Michel\",\r\n    \"lastname\" : \"#######################!¤%&/()=[]{}\",\r\n    \"totalprice\" : 400,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-09-09\",\r\n        \"checkout\" : \"2019-01-06\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send booking create request with special characters in lastname body parameter. The other parameter values are ok. In that case the test case should fail and proper error message should be found for validation problem in lastname field.Any name field should allow few special characters like space, dot, hyphen and apostrophe."
							},
							"response": []
						},
						{
							"name": "Create Booking with floating value in totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "337e2165-9ca1-43c2-9445-4ca0ac070679",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"const inputPrice = 124.45;\r",
											"  pm.test('Check if number is equal to input totalprice: 124.45', function () {\r",
											"      pm.expect(inputPrice).to.equal(body.booking.totalprice);\r",
											"  });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 124.45,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"2019-04-04\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "In this test case request will be sent with floating number in totalprice. And this field should allow floating value. And in response body the same totalprice value should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with negative value in totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89f07b87-9a1c-4e38-8e01-d018eec63f78",
										"exec": [
											"pm.test(\"For negative totalprice, response body should contain: totalpriceInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalpriceInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For negative totalprice, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For negative totalprice, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : -120,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"2019-04-04\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "In this test case send request with negative number in totalprice. Negative number should not be allowed. And in response body proper error message should be found like \"totalpriceInvalid\"."
							},
							"response": []
						},
						{
							"name": "Create Booking with alphanumeric value in totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f970018-bc1e-4a0f-be42-a93f93e9e63d",
										"exec": [
											"pm.test(\"For alphanumeric value in  totalprice, response body should contain: totalpriceInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalpriceInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For alphanumeric value in totalprice, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For alphanumeric value in totalprice, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : ABD778,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"2019-04-04\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "In this test case send request with alphanumeric value like ABD778 in totalprice. Alphanumeric number should not be allowed. And in response body proper error message should be found like \"totalpriceInvalid\"."
							},
							"response": []
						},
						{
							"name": "Create Booking with larger integer than:99999999999999980 in totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "183c269f-eb9a-4de9-ac92-31655085d72a",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"  let largeInput = \"99999999999999981\";\r",
											"  pm.test('Check if number is equal to input totalprice: 99999999999999981', function () {\r",
											"      pm.expect(body.booking.totalprice).to.equal(largeInput.toString());\r",
											"  });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 99999999999999981,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"2019-04-04\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will check the validation in totalprice field. This field accepts maximum value as:99999999999999980. But if provide 99999999999999981,the response returns totalprice: 99999999999999980. Either there should have proper error message or the same input should be found in response."
							},
							"response": []
						},
						{
							"name": "Create Booking with depositpaid false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4ec0aec-61a4-4bc7-9a3e-46be3bbdd9a5",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.test(\"Response body contains:: depositpaid:false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\\"depositpaid\\\":false\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"2019-04-04\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with depositpaid: false. And it should create booking perfectly. The response should also return depositpaid: false."
							},
							"response": []
						},
						{
							"name": "Create Booking with depositpaid 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "862598d2-92d7-41fa-b51b-7bddd330ed5b",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.test(\"If use zero 0 instead of true in depositpaid, then also response contains:: depositpaid:false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\\"depositpaid\\\":false\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : 0,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"2019-04-04\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with depositpaid: 0 and it shold work properly. As 0 is treated as boolean false, so in response depositpaid:false should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with depositpaid 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d6c8204-063b-466e-9d44-e795bb62427f",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.test(\"If use one 1 instead of true in depositpaid, then also response contains:: depositpaid:true\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\\"depositpaid\\\":true\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : 1,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"2019-04-04\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with depositpaid: 1 and it shold work properly. As 1 is treated as boolean true, so in response depositpaid:true  should be found"
							},
							"response": []
						},
						{
							"name": "Create Booking with negative depositpaid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e81b343-494e-4696-88d1-cfd2584852eb",
										"exec": [
											"pm.test(\"For negative depositpaid value, response body should contain: depositpaidInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositapaidInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For negative depositpaid value, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For negative depositpaid value, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : -1,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"2019-04-04\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with depositpaid: -1. For this input booking should not be created. Need proper validatoin for this case like : depositpaidInvalid."
							},
							"response": []
						},
						{
							"name": "Create Booking with depositpaid value greater than one 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7416955-0343-4d2a-a85a-76e1d9c0d5bf",
										"exec": [
											"pm.test(\"For any depositpaid value greater than 1, response body should contain: depositpaidInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositapaidInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For any depositpaid value greater than 1, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For any depositpaid value greater than 1 response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : 45,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"2019-04-04\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with depositpaid value greater than 1 like depositpaid: 45 and booking should not be created. Need proper validation for this case like : depositpaidInvalid."
							},
							"response": []
						},
						{
							"name": "Create Booking with large string input in depositpaid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0366f69b-86ec-47c1-8aa1-ce810cd0066c",
										"exec": [
											"pm.test(\"For large string in depositpaid value, response body should contain: depositpaidInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositapaidInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For large string in depositpaid value, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For large string in depositpaid value, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : one zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one five ,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"2019-04-04\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with large string as input value for depositpaid. No booking should be created. Need proper validation for this case like : depositpaidInvalid."
							},
							"response": []
						},
						{
							"name": "Create Booking with empty checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb4e99c1-d711-4292-9bc5-58b2ae276544",
										"exec": [
											"pm.test(\"For empty checkout, response body contains: checkoutIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkoutIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkout, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkout, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \"  \"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with empty checkout value. No booking should be created with such request. And in response there should have proper error message."
							},
							"response": []
						},
						{
							"name": "Create Booking with invalid checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40a586aa-bbad-4642-ad1e-ee00ddeca323",
										"exec": [
											"pm.test(\"For invalid checkout, response body should contains: invalidCheckout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckout\");\r",
											"});\r",
											"\r",
											"pm.test(\"For invalid checkout, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For invalid checkout, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-02-02\",\r\n        \"checkout\" : \" 5435326ASD\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with invalid checkout value like: checkout: \"5435326ASD\". No booking should be created with such request. And in response there should have proper error message."
							},
							"response": []
						},
						{
							"name": "Create Booking with empty checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "671d7b59-0367-4962-acbf-27ac028b7aa2",
										"exec": [
											"pm.test(\"For empty checkin, response body contains: checkinIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkinIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkin, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkin, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \" \",\r\n        \"checkout\" : \"2018-02-02\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with empty checkin value. No booking should be created with such request. And in response there should have proper error message."
							},
							"response": []
						},
						{
							"name": "Create Booking with invalid checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "189a4a6e-fb77-4c47-a9b3-caa0703523f0",
										"exec": [
											"pm.test(\"For invalid checkout, response body should contains: invalidCheckout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckout\");\r",
											"});\r",
											"\r",
											"pm.test(\"For invalid checkout, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For invalid checkout, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"5435326ASD\",\r\n        \"checkout\" : \" 2018-02-02\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with invalid checkin value like: checkin: \"5435326ASD\". No booking should be created with such request. And in response there should have proper error message."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout format:MM-DD-CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48f86487-d8be-46cc-a3c8-f305fb832b51",
										"exec": [
											"pm.test(\"As MM-DD-CCYY format should not be allowed so response is: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"11-23-2012\",\r\n        \"checkout\" : \"09-18-2013\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format , so other formt should not be allowed. If sent request with MM-DD-CCYY format, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout format:MM.DD.CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb902326-1a44-4137-94c5-28e77c27db38",
										"exec": [
											"pm.test(\"As MM.DD.CCYY format should not be allowed so response is: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"11.23.2012\",\r\n        \"checkout\" : \"09.18.2013\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format , so other formt should not be allowed. If sent request with MM.DD.CCYY format, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout format:MM/DD/CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe13afd9-7cd0-4eb6-952d-4d407e1e5137",
										"exec": [
											"pm.test(\"As MM/DD/CCYY format should not be allowed so response is: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"11/23/2012\",\r\n        \"checkout\" : \"09/18/2013\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format, so other format should not be allowed. If sent request with MM/DD/CCYY format, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout format:DD-MM-CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdfaad83-b0b5-44a4-859d-7c8d581181c4",
										"exec": [
											"pm.test(\"As DD-MM-CCYY format should not be allowed so response is: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"23-11-2012\",\r\n        \"checkout\" : \"18-08-2013\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format, so other format should not be allowed. If sent request with DD-MM-CCYY format, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout format:DD.MM.CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76a4cac4-a97f-4631-92cd-4ce846b94854",
										"exec": [
											"pm.test(\"As DD.MM.CCYY format is not be allowed so response is: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"23-11-2012\",\r\n        \"checkout\" : \"18-08-2013\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format, so other format should not be allowed. If sent request with DD.MM.CCYY format, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout format:DD/MM/CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1191039-2019-4975-aee5-1abd4528cb86",
										"exec": [
											"pm.test(\"As DD/MM/CCYY format is not allowed so response is: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"23-11-2012\",\r\n        \"checkout\" : \"18-08-2013\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format, so other format should not be allowed. If sent request with DD/MM/CCYY format, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with invalid date month in checkin checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fe1e157-c869-4a83-8bc2-38ab584fac61",
										"exec": [
											"pm.test(\"As provide invalid date and month, so response is: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2012-35-11\",\r\n        \"checkout\" : \"2013-12-43\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "In this test case, the request will be sent with invalid date month value in ceheckin checkout field in CCYY-MM-DD format. In date portion set date more than 31 and in month section set more than 12. As the date is invalid so proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout value 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48840a51-d9f6-4b87-8374-54ae1d9c5986",
										"exec": [
											"pm.test(\"As checkin checkout value is not in proper format so response should be: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"0\",\r\n        \"checkout\" : \"0\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with 0 value in checkin checkout field. This should not be allowed. So proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout value 1 to 12",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98357c44-1539-4542-8f59-9705c9119f90",
										"exec": [
											"pm.test(\"As checkin checkout value is not in proper format so response should be: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"3\",\r\n        \"checkout\" : \"1\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with integer value between 1 to 12 in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value between 1 to 12 then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout value 13 to 31",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f995ff36-bd71-4df4-960c-c2cbc5a005dc",
										"exec": [
											"pm.test(\"As checkin checkout value is not in proper format so response should be: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"13\",\r\n        \"checkout\" : \"30\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with integer value between 13 to 31 in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value between 13 to 31 then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout value 32 to 49",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e5e8bcc-c75b-46e7-9551-87a8fd0e13ce",
										"exec": [
											"pm.test(\"As checkin checkout value is not in proper format so response should be: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"32\",\r\n        \"checkout\" : \"45\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with integer value between 32 to 49 in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value between 32 to 49 then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with checkin checkout value 50 to 99",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be07994f-1be3-43aa-a025-09da05a56b1a",
										"exec": [
											"pm.test(\"As checkin checkout value is not in proper format so response should be: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"50\",\r\n        \"checkout\" : \"99\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with integer value between 50 to 99 in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value between 50 to 99 then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create booking with three digit checkin checkout value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5714ebce-50c1-4a78-bb77-af5e169226a6",
										"exec": [
											"pm.test(\"As checkin checkout value is not in proper format so response should be: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"501\",\r\n        \"checkout\" : \"999\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with three digit integer in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value like 245 or 488 or like this, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with invalid checkin checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3be573f4-694c-47b3-964c-8bdd74ff2b65",
										"exec": [
											"pm.test(\"As checkout is not in proper format so response should be: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"ASDF\",\r\n        \"checkout\" : \"19932323DDD\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with invalid data in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value like 245FFDS or 788488 or like this, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Create Booking with bigger checkin than checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3077b361-0467-421b-9be3-9020fd2dd5f1",
										"exec": [
											"pm.test(\"As checkout is smaller than checkin so, response should be: checkoutShouldBeGreaterOrEqualToCheckin \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkoutShouldBeGreaterOrEqualToCheckin\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-11-14\",\r\n        \"checkout\" : \"2018-03-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with bigger checkin value than checkout. Checkin value should be smaller or euqal to checkout. So in this test case the booking should not be created and should get proper error response."
							},
							"response": []
						},
						{
							"name": "Create Booking with same checkin checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d7370f8-327b-443d-958e-63add3afccf4",
										"exec": [
											"\r",
											"pm.test(\"Booking is created for same checkin checkout date , so response contains: bookingid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingid\");\r",
											"});\r",
											"pm.test(\"Booking is created for same checkin checkout date , so response contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"Booking is created for same checkin checkout date , so response contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"Booking is created for same checkin checkout date , so response contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"Booking is created for same checkin checkout date , so response contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"Booking is created for same checkin checkout date , so response contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"Booking is created for same checkin checkout date , so response contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"Booking is created for same checkin checkout date , so response contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-11-14\",\r\n        \"checkout\" : \"2019-11-14\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with same checkin checkout. So in this test case the booking should be created"
							},
							"response": []
						},
						{
							"name": "Create Booking with large string as additionalneeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc5cf099-bd00-48cb-b1ce-224b1241acd8",
										"exec": [
											"pm.test(\"For large input in additionalneeds, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For large input in additionalneeds, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For large input in additionalneeds, response should contain: additionalneedsInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneedsInvalid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-1-14\",\r\n        \"checkout\" : \"2018-03-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "In this test the request will be sent with large string in additionalneeds parameter but all other parameter values are perfect. This test should fail and return proper error message for incorrect validation in additionalneeds field."
							},
							"response": []
						},
						{
							"name": "Create Booking with empty additionalneeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6602db0-1b39-437b-a45b-a57bcac7a306",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body should match string: bookingid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"bookingid\");",
											"",
											"});",
											"pm.test(\"Status code name should be: OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-1-14\",\r\n        \"checkout\" : \"2018-03-01\"\r\n    },\r\n    \"additionalneeds\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send request with empty additionalneeds. The other paremeter have proper value. In that case booking should not be created and there need proper erorr message."
							},
							"response": []
						},
						{
							"name": "Create Booking with empty firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf1ea995-45ed-4d74-af77-b2beb1c7b858",
										"exec": [
											"pm.test(\"For empty firstname, response body contains: firstnameIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstnameIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty firstname, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty firstname, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \" \",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-1-14\",\r\n        \"checkout\" : \"2018-03-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send POST requet with firstname and it should return proper error messsage."
							},
							"response": []
						},
						{
							"name": "Create Booking with empty lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9313c606-33fd-4b55-96d2-84766321a195",
										"exec": [
											"pm.test(\"For empty lastname, response body contains: lastnameIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastnameIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty lastname, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty lastname, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \" \",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 212,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-1-14\",\r\n        \"checkout\" : \"2018-03-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will send POST requet with empty lastname and it should return proper error messsage"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "358e916c-7dae-4987-9541-a27c9c9dd804",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6064e654-7959-44a5-9f49-cae4ae8466f9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Booking Ids",
					"item": [
						{
							"name": "Get Booking Ids with no parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51a213a4-cd0b-4202-8375-4781976a98e9",
										"exec": [
											"pm.test(\"Status code is 200 if gets booking id in response\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								},
								"description": "This test case will find out all the booking ids. In response body all the booking ids will be found."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with firstname, lastname, checkin  and checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3f3d2d7-2e3b-40af-bcc4-f66ac6e47e9f",
										"exec": [
											"pm.test(\"Status code is 200 \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?firstname={{firstname}}&lastname={{lastname}}&checkin={{checkin}}&checkout={{checkout}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{firstname}}"
										},
										{
											"key": "lastname",
											"value": "{{lastname}}"
										},
										{
											"key": "checkin",
											"value": "{{checkin}}"
										},
										{
											"key": "checkout",
											"value": "{{checkout}}"
										}
									]
								},
								"description": "This test case will send GET request with firstname, lastname, checkin and checkout parameters and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with firstname, lastname  and checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1667a871-79b8-4679-9789-1e0ca1c586fc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?firstname={{firstname}}&lastname={{lastname}}&checkin={{checkin}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{firstname}}"
										},
										{
											"key": "lastname",
											"value": "{{lastname}}"
										},
										{
											"key": "checkin",
											"value": "{{checkin}}"
										}
									]
								},
								"description": "This test case will send GET request with firstname, lastname and checkin parameters and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with firstname, lastname  and checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc403b69-2465-4e59-b993-2829dee1dc63",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?firstname={{firstname}}&lastname={{lastname}}&checkout={{checkout}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{firstname}}"
										},
										{
											"key": "lastname",
											"value": "{{lastname}}"
										},
										{
											"key": "checkout",
											"value": "{{checkout}}"
										}
									]
								},
								"description": "This test case will send GET request with firstname, lastname and checkout parameters and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with firstname, checkin and checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a71e16f-00a8-4d8f-babf-ff4b2d9e26d1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?firstname={{firstname}}&checkin={{checkin}}&checkout={{checkout}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{firstname}}"
										},
										{
											"key": "checkin",
											"value": "{{checkin}}"
										},
										{
											"key": "checkout",
											"value": "{{checkout}}"
										}
									]
								},
								"description": "This test case will send GET request with firstname, checkin and checkout parameters and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with firstname and lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8573f3b9-6a75-4324-b6a8-80f1a1346ecc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?firstname={{firstname}}&lastname={{lastname}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{firstname}}"
										},
										{
											"key": "lastname",
											"value": "{{lastname}}"
										}
									]
								},
								"description": "This test case will send GET request with firstname and lastname parameters and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with firstname and checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ede61ef-f264-48c2-a47a-47d5e865fa5d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?firstname={{firstname}}&checkin={{checkin}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{firstname}}"
										},
										{
											"key": "checkin",
											"value": "{{checkin}}"
										}
									]
								},
								"description": "This test case will send GET request with firstname and checkin parameters and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with firstname and checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8552236-4374-4d78-8bef-8009ce15d5d9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?firstname={{firstname}}&checkout={{checkout}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{firstname}}"
										},
										{
											"key": "checkout",
											"value": "{{checkout}}"
										}
									]
								},
								"description": "This test case will send GET request with firstname and checkout parameters and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with lastname, checkin and checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3082588-82b8-4910-be47-7cdeed773bce",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?lastname={{lastname}}&checkin={{checkin}}&checkout={{checkout}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "lastname",
											"value": "{{lastname}}"
										},
										{
											"key": "checkin",
											"value": "{{checkin}}"
										},
										{
											"key": "checkout",
											"value": "{{checkout}}"
										}
									]
								},
								"description": "This test case will send GET request with lastname, checkin and checkout parameters and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with lastname and checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec8a41a6-d589-434b-b464-8284730c0ac9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?lastname={{lastname}}&checkin={{checkin}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "lastname",
											"value": "{{lastname}}"
										},
										{
											"key": "checkin",
											"value": "{{checkin}}"
										}
									]
								},
								"description": "This test case will send GET request with lastname and checkin parameters and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with lastname and checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72fbaba1-bbb6-4570-9773-0803e0d71060",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?lastname={{lastname}}&checkout={{checkout}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "lastname",
											"value": "{{lastname}}"
										},
										{
											"key": "checkout",
											"value": "{{checkout}}"
										}
									]
								},
								"description": "This test case will send GET request with lastname and checkout parameters and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkin and checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2963ed76-3b14-4ba2-97ce-9498f69e9f6c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin={{checkin}}&checkout={{checkout}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "{{checkin}}"
										},
										{
											"key": "checkout",
											"value": "{{checkout}}"
										}
									]
								},
								"description": "This test case will send GET request with checkin and checkout parameters and should return the matching booking ids"
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ac25ea0-7e75-4e4d-8d2b-f4a13281a930",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });\r",
											"  \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?firstname={{firstname}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{firstname}}"
										}
									]
								},
								"description": "This test case will send GET request with firstname parameter and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with non existing firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85d81d48-3044-462b-ac26-0e3e8b9c45d7",
										"exec": [
											"pm.test(\"Response body should contain: noMatchFound\", function () {\r",
											"    pm.expect(pm.response.text()).to.equal(\"noMatchFound\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?firstname=Venus0192",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "Venus0192"
										}
									]
								},
								"description": "This test case will send GET request with firstname which does not exist. So no booking id should be found and proper error message should be returned."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b64837cd-aeff-42cb-a48e-61dbdbcbc5ce",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const bookingID = pm.environment.get(\"id\");\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"      let hasID=body.some(e => e.bookingid === bookingID)\r",
											"      pm.expect(hasID).to.equal(true);\r",
											"  });\r",
											"  \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?lastname={{lastname}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "lastname",
											"value": "{{lastname}}"
										}
									]
								},
								"description": "This test case will send GET request with lastname parameter and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with non existing lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91adc3b1-a896-42c1-84db-4b3d999a88db",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body should contain: noMatchFound\", function () {\r",
											"    pm.expect(pm.response.text()).to.equal(\"noMatchFound\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?lastname=Caprio121342",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "lastname",
											"value": "Caprio121342"
										}
									]
								},
								"description": "This test case will send GET request with lastname which does not exist. So no booking id should be found and proper error message should be returned."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea00d0c4-0464-43fb-a0eb-1aad358f19ab",
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"\r",
											"  var body = JSON.parse(responseBody); \r",
											"  pm.test('Created bookings id is found', function () \r",
											"  {\r",
											"    \r",
											"    for (var i in body)\r",
											"    {\r",
											"      var bookingid=body[i].bookingid\r",
											"      console.log(\"id:\"+bookingid)\r",
											"      pm.sendRequest({\r",
											"          url: (\"https://restful-booker.herokuapp.com/booking/\"+bookingid),\r",
											"          method: 'GET',\r",
											"          header: {\r",
											"              'Accept': 'application/json',\r",
											"          }\r",
											"      }, \r",
											"      function (err, res) \r",
											"      {\r",
											"        \r",
											"        pm.test('verify checkin date for bookingids', function () \r",
											"        {\r",
											"              pm.expect(res.text().charAt(0)).to.equal(\"{\")\r",
											"              var checkindate = res.json().bookingdates.checkin;\r",
											"              var setCheckin=pm.environment.get(\"checkin\");\r",
											"              let dateDiff = moment(checkindate).isBefore(setCheckin)\r",
											"\r",
											"      \r",
											"              pm.expect(dateDiff).to.be.false;\r",
											"        });\r",
											"     \r",
											"\r",
											"      });\r",
											"     }\r",
											"  });\r",
											"\r",
											"  \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin={{checkin}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "{{checkin}}"
										}
									]
								},
								"description": "This test case will send GET request with checkin parameter and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with non-existing checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "331af558-484c-40fc-9f8a-56bffeb5ba4d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body should contain: noMatchFound\", function () {\r",
											"    pm.expect(pm.response.text()).to.equal(\"noMatchFound\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin=9039-09-03",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "9039-09-03"
										}
									]
								},
								"description": "This test case will send GET request with checkin which does not exist. So no booking id should be found and proper error message should be returned."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with long input in checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6a3adbc-8859-4db6-8db3-1ad347d0e4cd",
										"exec": [
											"pm.test(\"Status code should be 414\", function () {\r",
											"    pm.response.to.have.status(414);\r",
											"});\r",
											"pm.test(\"Response body should contain: noMatchFound\", function () {\r",
											"    pm.expect(pm.response.text()).to.equal(\"noMatchFound\");\r",
											"});\r",
											"pm.test(\"Response phrase should be: Request-URI Too Long\", function () {\r",
											"    pm.response.to.have.status(\"Request-URI Too Long\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin=",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "
										}
									]
								},
								"description": "This test case will send GET request with long input in checkin. The input is like 25902 digit numeric value . So no booking id should be found and proper error message should be returned."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkin format: DD.MM.CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8c80d75-2ede-49a0-8e26-e40714894ab2",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckinData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckinData\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin=22.09.1921",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "22.09.1921"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkin format.Checkin data will be sent in DD.MM.CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkin format: DD-MM-CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d7db0e2-0cda-497b-889d-5757eb1fa667",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckinData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckinData\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin=22-09-1921",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "22-09-1921"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkin format.Checkin data will be sent in DD-MM-CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkin format: DD/MM/CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf6e21c6-e84a-454b-8b47-caf283bbfbe8",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckinData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckinData\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin=22-09-1921",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "22-09-1921"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkin format.Checkin data will be sent in DD/MM/CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkin format: MM.DD.CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61f7897f-c919-4fad-a3a9-7c67e8a37f23",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckinData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckinData\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin=09.09.2019",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "09.09.2019"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkin format.Checkin data will be sent in MM.DD.CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkin format: MM-DD-CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a40fb39e-ac52-4a1b-9639-29bdbf4aa231",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckinData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckinData\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin=09.09.2019",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "09.09.2019"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkin format.Checkin data will be sent in MM-DD-CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkin format: MM/DD/CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6732c0ec-f092-49dd-8059-62550d47f9d8",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckinData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckinData\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin=09.09.2019",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "09.09.2019"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkin format.Checkin data will be sent in MM/DD/CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ba70147-e59b-4db3-8da7-1e594ff353db",
										"exec": [
											"\r",
											"const moment = require('moment');\r",
											"//pm.test(\"Status code is 200\", function () {\r",
											"  //  pm.response.to.have.status(200);\r",
											"//});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"\r",
											"  pm.test('Created bookings id is found', function () {\r",
											"    \r",
											"    for (var i in body)\r",
											"    {\r",
											"    var bookingid=body[i].bookingid\r",
											"    console.log(\"id:\"+bookingid)\r",
											"    pm.sendRequest({\r",
											"        url: (\"https://restful-booker.herokuapp.com/booking/\"+bookingid),\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"        }\r",
											"    }, function (err, res) \r",
											"    {\r",
											"      \r",
											"      pm.test('verify checkout date for bookingids', function () \r",
											"       {\r",
											"          var checkoutdate = res.json().bookingdates.checkout;\r",
											"          var setCheckout=pm.environment.get(\"checkout\");\r",
											"          let dateDiff = moment(checkoutdate).isBefore(setCheckout)\r",
											"\r",
											"          console.log(checkoutdate);\r",
											"\r",
											"          pm.expect(dateDiff).to.be.false;\r",
											"       });\r",
											"\r",
											"\r",
											"\r",
											"    });\r",
											"\r",
											"     }\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkout={{checkout}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkout",
											"value": "{{checkout}}"
										}
									]
								},
								"description": "This test case will send GET request with checkout parameter and should return the matching booking ids."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with non-existing checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22b3725f-86f3-4c85-aae8-ae9daee72277",
										"exec": [
											"pm.test(\"Response body should contain: bookingidNotFound\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingidNotFound\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkout=5000-09-03",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkout",
											"value": "5000-09-03"
										}
									]
								},
								"description": "This test case will send GET request with checkout which does not exist. So no booking id should be found and proper error message should be returned."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkout format: DD.MM.CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "407b21f8-5fc5-4780-94f6-48ced73a8b24",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckoutData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckoutData\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkout=22.02.2018",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkout",
											"value": "22.02.2018"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkout format.Checkout data will be sent in DD.MM.CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkout format: DD-MM-CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c22b0bf-42a7-48b8-b10d-263d3a856a42",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckoutData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckoutData\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkout=22-02-2018",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkout",
											"value": "22-02-2018"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkout format.Checkout data will be sent in DD-MM-CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkout format: DD/MM/CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "148f72cd-6ed2-4d9b-b977-52d33468743f",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckoutData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckoutData\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkout=22/02/2018",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkout",
											"value": "22/02/2018"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkout format.Checkout data will be sent in DD/MM/CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkout format: MM.DD.CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fc440f1-7992-4396-ad2d-80a1e45e36ed",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckoutData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckoutData\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkout=12.23.2017",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkout",
											"value": "12.23.2017"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkout format.Checkout data will be sent in MM.DD.CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkout format: MM-DD-CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e43a9b78-80d5-489e-a47c-7153caf0badf",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckoutData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckoutData\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkout=12-24-2018",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkout",
											"value": "12-24-2018"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkout format.Checkout data will be sent in MM-DD-CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						},
						{
							"name": "Get Booking Ids with checkout format: MM/DD/CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fac4ef2-0fb6-4e56-9f5f-dabac868d8df",
										"exec": [
											"pm.test(\"Response body should contain: invalidCheckoutData\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckoutData\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkout=12/24/2018",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkout",
											"value": "12/24/2018"
										}
									]
								},
								"description": "This test case will send GET request with invalid checkout format.Checkout data will be sent in MM/DD/CCYY format. So the request should not return any booking id and need proper error response."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99023b15-c854-4623-8db8-e36aee7326fa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "874ca046-745c-473e-9e1e-732641304c16",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Booking",
					"item": [
						{
							"name": "Get Booking of existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df75230a-ad50-4a4b-976f-32bd5cb77900",
										"exec": [
											"pm.test(\"Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});\r",
											"pm.test(\"Body matches string: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"Body matches string: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"Body matches string: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"Body matches string: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"Body matches string: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"Body matches string: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"Body matches string: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send GET request with an existing ID in URL and return Booking information as response body."
							},
							"response": []
						},
						{
							"name": "Get Booking of non-existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4eca927-c60f-4640-8447-cbf4b09ff840",
										"exec": [
											"pm.test(\"Status code should be 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status phrase should contain: Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Response body should contain: Not Found\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/100009000232",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"100009000232"
									]
								},
								"description": "This test case will send GET request with an non existing ID in URL and will not return any Booking information in response body."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f5b43c5e-a75f-4cab-8de5-c1d4983b6c6e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "24e0f1d0-efcd-4671-91a3-3879cf65acd9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update Booking",
					"item": [
						{
							"name": "Update Booking of existing id with all correct body parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5086564f-afad-4f08-a6fd-b5a70bdf0e8e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body  matches string: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});\r",
											"pm.test(\"Body matches string: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"Body matches string: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"Body matches string: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"Body matches string: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"Body matches string: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"Body matches string: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"Body matches string: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update an existing id with all correct body parameters and the response will return all the newly updated information."
							},
							"response": []
						},
						{
							"name": "Update Booking of non-existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "394ba6cd-4afd-434c-ac5f-c47910e7ecff",
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"pm.test(\"Body should matches string: idNotExist\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"idNotExist\");\r",
											"});\r",
											"pm.test(\"Status phrase should be: Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/784",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"784"
									]
								},
								"description": "This test case will send PUT request to update a non-existing id with all correct body parameters and the response will return proper error message."
							},
							"response": []
						},
						{
							"name": "Update Booking without cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "787a37e7-6fe3-4bfb-96a3-01d6265649ab",
										"exec": [
											"pm.test(\"As cookie is optinal, so with without cookie it works perfectly, Status code: 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}",
										"disabled": true
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request  without cookie. But as cookie is optional, so without cookie the update should work perfectly"
							},
							"response": []
						},
						{
							"name": "Update Booking without authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7b67337-b20f-4606-a8de-099ba72de8c5",
										"exec": [
											"pm.test(\"As authorisation is optinal, so without authorisation it works perfectly, Status code: 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update a non-existing id with all correct body parameters and the response will return proper error message."
							},
							"response": []
						},
						{
							"name": "Update Booking with wrong cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3651e97-0c3e-4342-97f4-95fa44c92f2e",
										"exec": [
											"pm.test(\"As cookie is optinal, so with wrong cookie works perfectly, Status code: 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should havve string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token=ewweweqwr24"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Lucwas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update an existing id with wrong cookie value. As the cookie is optional so, either we provide correct cookie or not ,the operation should work.  And the response will return all the newly updated information."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with all empty body parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ee4152f-6ded-4e0e-80d8-e78818a6bd90",
										"exec": [
											"pm.test(\"For all empty body parameter, response status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For all empty body parameter, response body contains: Bad Request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For all empty body parameter, response phrase is: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"\",\r\n    \"lastname\" : \"\",\r\n    \"totalprice\" : ,\r\n    \"depositpaid\" : ,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"additionalneeds\" : \"\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update an existing id with all empty body parameters and the response will return all the newly updated information."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with empty firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "630ab149-5e87-477d-96ae-fc27550d9b05",
										"exec": [
											"pm.test(\"For empty firstname, response  body should contain: firstnameIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstnameIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty firstname, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty firstname, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \" \",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update an existing id with empty firstname and the response will return proper error information."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with large string in firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec8f3c17-f2cf-4bc1-a7a7-adf3917cdca9",
										"exec": [
											"pm.test(\"For large input in firstname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For large input in firstname, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For large input in firstname, response should contain: firstnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstnameInvalid\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon \",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update an existing id with large string in firstname and the response will return proper error information."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with special characters in firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "211aa9d5-9763-4329-8579-ada72f61a0d6",
										"exec": [
											"pm.test(\"If provide only special characters in firstname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"If provide only special characters in firstname, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"If provide only special characters in firstname, response should contain: firstnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstnameInvalid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"#######################!¤%&/()=[]{}\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update an existing id with only special characters in firstname and the response will return proper error information."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with empty lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ace33d4-b07c-4728-be19-acd490c1854b",
										"exec": [
											"pm.test(\"For empty lastname, response body contains: lastnameIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastnameIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty lastname, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty lastname, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \" \",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update an existing id with empty lastname and the response will return proper error information."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with large string in lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67610170-65a5-4220-9feb-d04c4feb886d",
										"exec": [
											"pm.test(\"For large input in lastname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For large input in lastname, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For large input in lastname, response should contain: lastnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastnameInvalid\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas Lucas \",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update an existing id with large string in lastname and the response will return proper error information."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with special characters in lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6a0dc22-9c68-4742-bebf-b156747aa561",
										"exec": [
											"pm.test(\"If provide only special characters in lastname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"If provide only special characters in lastname, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"If provide only special characters in lastname, response should contain: lastnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastnameInvalid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"William\",\r\n    \"lastname\" : \"#######################!¤%&/()=[]{}\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update an existing id with only special characters in lastname and the response will return proper error information."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with floating value in totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c58c66c9-e9ad-4073-9232-3be635366640",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"const inputPrice = 124.45;\r",
											"  pm.test('Check if number is equal to input totalprice: 124.45', function () {\r",
											"      pm.expect(body.totalprice).to.equal(inputPrice);\r",
											"  });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 124.45,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request to update an existing id with floating value in totalprice.And this field should allow floating value. And in response body the same totalprice value should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with negative value in totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca5cb9f9-7877-4677-a810-34b59d02c902",
										"exec": [
											"pm.test(\"For negative totalprice, response body should contain: totalpriceInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalpriceInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For negative totalprice, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For negative totalprice, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : -124,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "In this test case send request with negative number in totalprice. Negative number should not be allowed. And in response body proper error message should be found like \"totalpriceInvalid\"."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with alphanumeric value in totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dca26209-e38a-47b1-b167-324465fb2dca",
										"exec": [
											"pm.test(\"For alphanumeric value in  totalprice, response body should contain: totalpriceInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalpriceInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For alphanumeric value in totalprice, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For alphanumeric value in totalprice, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 124ASDD,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "In this test case send PUT request to update existing booking id with alphanumeric value like ABD778 in totalprice. Alpha-numeric number should not be allowed. And in response body proper error message should be found like \"totalpriceInvalid\"."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with larger value than:99999999999999980 in  totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a4eaaaa-3576-4d1d-af92-0a4ba07a90f5",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"  let largeInput = \"99999999999999981\";\r",
											"  pm.test('Check if number is equal to input totalprice: 99999999999999981', function () {\r",
											"      pm.expect(body.totalprice).to.equal(largeInput.toString());\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 99999999999999981,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will check the validation in totalprice field while update operation using PUT method. This field accepts maximum value as:99999999999999980. But if provide 99999999999999981,the response returns totalprice: 99999999999999980. Either there should have proper error message or the same input should be found in response."
							},
							"response": []
						},
						{
							"name": "Update Booking of existingid with depositpaid false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9397da53-873d-4c27-b7c4-1ebd56505e0f",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.test(\"Response body contains:: depositpaid:false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\\"depositpaid\\\":false\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT  request with depositpaid: false. And it should update booking perfectly. The response should also return depositpaid: false."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with depositpaid 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "635ad22c-1dda-43fd-adaf-e6df1a8fe204",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.test(\"If use zero 0 instead of true in depositpaid, then also response contains:: depositpaid:false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\\"depositpaid\\\":false\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : 0,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with depositpaid: 0 and it shold work properly. As zero 0 is treated as boolean false, so in response depositpaid:false should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with depositpaid 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdac5bee-6992-4549-8b16-79f1784ae5f6",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.test(\"If use one 1 instead of true in depositpaid, then also response contains:: depositpaid:true\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\\"depositpaid\\\":true\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : 1,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with depositpaid: 1 and it should work properly. As zero 1 is treated as boolean true, so in response depositpaid:true should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with negative depositpaid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48e56716-c847-4d13-9a59-ce7251cd0cfd",
										"exec": [
											"pm.test(\"For negative depositpaid value, response body should contain: depositpaidInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositapaidInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For negative depositpaid value, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For negative depositpaid value, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : -18,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with depositpaid: -1 and it should not work properly. Need proper validatoin for this case like : depositpaidInvalid."
							},
							"response": []
						},
						{
							"name": "Update booking of existing id with depositpaid value greater than one 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd7c645d-183c-493b-a209-807924534c4a",
										"exec": [
											"pm.test(\"For any depositpaid value greater than 1, response body should contain: depositpaidInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositapaidInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For any depositpaid value greater than 1, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For any depositpaid value greater than 1 response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : -124,\r\n    \"depositpaid\" : 566,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with depositpaid value greater than 1 like depositpaid: 45 and it should not work properly. Need proper validation for this case like : depositpaidInvalid."
							},
							"response": []
						},
						{
							"name": "Update booking of existing id with large string input in depositpaid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf62bb7a-a53c-4a2a-916b-d999b9650356",
										"exec": [
											"pm.test(\"For large string in depositpaid value, response body should contain: depositpaidInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositapaidInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For large string in depositpaid value, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For large string in depositpaid value, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : -124,\r\n    \"depositpaid\" : one zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one five,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with large string as input value for depositpaid and it should not work properly. Need proper validation for this case like : depositpaidInvalid."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with empty checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "382e82a2-43b5-42bc-9e4e-2a86f8ac9562",
										"exec": [
											"pm.test(\"For empty checkout, response body contains: checkoutIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkoutIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkout, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkout, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-11-21\",\r\n        \"checkout\" : \"\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with empty checkout value. No booking should be created with such request. And in response there should have proper error message."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with invalid checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8988c070-8169-4455-888f-2b8746511d32",
										"exec": [
											"pm.test(\"For invalid checkout, response body should contains: invalidCheckout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckout\");\r",
											"});\r",
											"\r",
											"pm.test(\"For invalid checkout, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For invalid checkout, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-11-21\",\r\n        \"checkout\" : \"ADASDASD324324\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with invalid checkout value like: checkout: \"5435326ASD\". No booking should be created with such request. And in response there should have proper error message."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with empty checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a7f5c17-b2d3-4614-b3f7-4b2d3ec28a15",
										"exec": [
											"pm.test(\"For empty checkin, response body contains: checkinIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkinIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkin, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkin, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"\",\r\n        \"checkout\" : \"2019-11-21\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with empty checkin value. No booking should be created with such request. And in response there should have proper error message."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with invalid checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "734d9823-29ae-4b94-938b-da839dbd1568",
										"exec": [
											"pm.test(\"For invalid checkout, response body should contains: invalidCheckout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"invalidCheckout\");\r",
											"});\r",
											"\r",
											"pm.test(\"For invalid checkout, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For invalid checkout, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"ADASDASD324324\",\r\n        \"checkout\" : \"2019-11-21\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with invalid checkin value like: checkin: \"5435326ASD\". No booking should be created with such request. And in response there should have proper error message."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout format:MM-DD-CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2155bc8c-3ade-4be0-9dc8-368d5fb7b0d8",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"11-23-2019\",\r\n        \"checkout\" : \"11-27-2019\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD   format , so other formt should not be allowed. If sent PUT request with MM-DD-CCYY formated date in checkin checkout, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout format:MM.DD.CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8630bdf5-6ff5-4193-ae7b-e4ca1effc930",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"11.23.2019\",\r\n        \"checkout\" : \"11.27.2019\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format, so other format should not be allowed. If sent PUT request with MM.DD.CCYY formatted date in checkin checkout, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout format:MM/DD/CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "135c95d7-3b28-417a-844e-2d2c62506969",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"11/23/2019\",\r\n        \"checkout\" : \"11/27/2019\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format, so other format should not be allowed. If sent PUT request with MM/DD/CCYY formatted date in checkin checkout, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout format:DD-MM-CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d85523a-829a-46db-9939-d929ad2ce7b5",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"24-11-2019\",\r\n        \"checkout\" : \"29-11-2019\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format, so other format should not be allowed. If sent PUT request with DD-MM-CCYY formatted date in checkin checkout, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout format:DD.MM.CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09ed84a1-b57a-42bb-816b-c1eeacdb5d56",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"24.11.2019\",\r\n        \"checkout\" : \"29.11.2019\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format, so other format should not be allowed. If sent PUT request with DD.MM.CCYY formatted date in checkin checkout, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout format: DD/MM/CCYY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e0789f5-184c-4e5b-a5fd-9b21257a7e86",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon \",\r\n    \"lastname\" : \"Lucas \",\r\n    \"totalprice\" : 999,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"24/11/2019\",\r\n        \"checkout\" : \"29/11/2019\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "Checkin checkout should only allow CCYY-MM-DD format, so other format should not be allowed. If sent PUT request with DD/MM/CCYY formatted date in checkin checkout, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with invalid date month in checkin checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2eee3e24-5cfe-4dac-8311-8e2a3a0698ef",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-55\",\r\n        \"checkout\" : \"2019-61-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "In this test case, the PUT request will be sent with invalid date month value in ceheckin checkout field in CCYY-MM-DD format. As the date is invalid so proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout value 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "829cf5ec-a659-44e3-83b2-3309e0d86e26",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"0\",\r\n        \"checkout\" : \"0\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with zero value in checkin checkout field. only Zero should not be allowed. So proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout value 1 to 12",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c848d7cb-3399-4dab-87cb-55e591084e58",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"1\",\r\n        \"checkout\" : \"12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with integer value between 1 to 12 in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value between 1 to 12 then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout value 13 to 31",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6080cd6c-9a7a-46c0-a738-0c9f33c784a3",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"13\",\r\n        \"checkout\" : \"31\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with integer value between 13 to 31 in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value between 13 to 31 then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout value 32 to 49",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1cce13b-fb0e-4e02-8007-c3e0b3103213",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"35\",\r\n        \"checkout\" : \"44\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with integer value between 32 to 49 in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value between 32 to 49 then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with checkin checkout value 50 to 99",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "710d6732-9ca0-4b0d-9370-cc9fcbc83c3c",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"51\",\r\n        \"checkout\" : \"97\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with integer value between 50 to 99 in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value between 50 to 99 then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with three digit checkin checkout value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af351096-1f6c-4fc8-9131-34dcca35877a",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"151\",\r\n        \"checkout\" : \"397\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with three-digit integer in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value like 245,488 or like this, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with invalid checkin checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9da4e8e7-4705-4bdc-965f-4b45b0ab9f0b",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"ASDF\",\r\n        \"checkout\" : \"FDFDS3434\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with invalid data in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value like 1434EER, 2765645 or like this, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with bigger checkin than checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca33bcc1-985a-44d1-9dc4-d138e17c57c6",
										"exec": [
											"pm.test(\"As checkout is smaller than checkin so, response should be: checkoutShouldBeGreaterOrEqualToCheckin \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkoutShouldBeGreaterOrEqualToCheckin\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-23\",\r\n        \"checkout\" : \"2019-09-21\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with bigger checkin value than checkout. Checkin value should be smaller or euqal to checkout. So in this test case the booking should not be created and should get proper error response"
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with same checkin checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa09b79a-5f6a-4599-95b3-e9c1e7a1ea6a",
										"exec": [
											"pm.test(\"Booking is updated with same checkin checkout date , so response contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"Booking is updated with same checkin checkout date , so response contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"Booking is updated with same checkin checkout date , so response contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"Booking is updated with same checkin checkout date , so response contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"Booking is updated with same checkin checkout date , so response contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"Booking is updated with same checkin checkout date , so response contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"Booking is updated with same checkin checkout date , so response contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-23\",\r\n        \"checkout\" : \"2019-10-23\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with same checkin checkout. So in this test case the booking should be updated."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with large string as additionalneeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fa77ee8-1d84-4c90-967e-fe0b6097659e",
										"exec": [
											"pm.test(\"For large input in additionalneeds, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For large input in additionalneeds, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For large input in additionalneeds, response should contain: additionalneedsInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneedsInvalid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-23\",\r\n        \"checkout\" : \"2019-1-23\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast Breakfast \"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "In this test the PUT request will be sent with large string in additionalneeds parameter but all otehr parameter values are perfect. This test should fail and return proper error message for incorrect validation in lastname field."
							},
							"response": []
						},
						{
							"name": "Update Booking of existing id with empty additionalneeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d971bacd-749f-4352-bf40-145a1d68b11c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body should match string: bookingid\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"bookingid\");",
											"",
											"});",
											"pm.test(\"Status code name should be: OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James13\",\r\n    \"lastname\" : \"Lucas\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-23\",\r\n        \"checkout\" : \"2019-1-23\"\r\n    },\r\n    \"additionalneeds\" : \" \"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PUT request with empty additionalneeds. The other paremeter have proper value. In that case booking should not be created and there need proper erorr message."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "65c16d5d-e918-4019-8a8b-f2eab4ff37af",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3c791923-622e-48b4-9800-e00ff228a68e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Partial Update Booking",
					"item": [
						{
							"name": "Partial Update Booking of existing id with correct firstname and lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0803e67-d808-4695-8e7e-dca20c0e5686",
										"exec": [
											"pm.test(\"For successful update response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For successful update response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											"\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"let fName=\"Michael\";\r",
											"let lName=\"Bivan\";\r",
											"pm.test('Firstname should be: Michael', function () {\r",
											"      pm.expect(body.firstname).to.equal(fName);\r",
											"  });\r",
											"pm.test('Lastname should be: Bivan', function () {\r",
											"      pm.expect(body.firstname).to.equal(fName);\r",
											"  });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Michael\",\r\n    \"lastname\" : \"Bivan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only firstname and lastname. The other body parameter will not be set in body parameter. In such case the update should work perfectly and response should contian all the information of booking. The updated information should also be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of non-existing id with correct firstname and lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "607e9299-7bbd-475a-9992-b9bd21426ad1",
										"exec": [
											"pm.test(\"If update non-existing id, Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"pm.test(\"If update non-existing id, Body should matche string: idNotExist\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"idNotExist\");\r",
											"});\r",
											"pm.test(\"If update non-existing id, Status phrase: Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Michael\",\r\n    \"lastname\" : \"Bivan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/99",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"99"
									]
								},
								"description": "This test case will send PUT request to update a non-existing id with correct body parameters and the response will return proper error message."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking with wrong cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4c23215-f9ed-4fe6-b173-67607721483e",
										"exec": [
											"pm.test(\"Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token=533JHKHjhfs7"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Michael\",\r\n    \"lastname\" : \"Bivan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with wrong cookie. As cookie is optional so if set wrong value update should also work."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking without cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74a5e89b-2ade-47f8-8bce-c848b65dfc54",
										"exec": [
											"pm.test(\"Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}",
										"disabled": true
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Michael\",\r\n    \"lastname\" : \"Bivan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon without cookie, but use Authorisation in header. As cookie is optional so if set wrong value update should also work."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking with wrong Authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81629d55-007c-4e1a-83fa-aa0eba06b2ea",
										"exec": [
											"pm.test(\"Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123322"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Michael\",\r\n    \"lastname\" : \"Bivan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with wrong authorisation value. As Authorisation is optional so if set wrong value update should also work."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking without authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ef62cd8-1e30-4a79-b4a3-5ed0002fbde2",
										"exec": [
											"pm.test(\"Status code should be 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Michael\",\r\n    \"lastname\" : \"Bivan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon without authorisation value. As Authorisation is optional so if set wrong value update should also work."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with only firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dea50b77-c00f-49d7-a781-25ded3005c1f",
										"exec": [
											"pm.test(\"For successful update response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For successful update response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											"\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"let fName=\"Riina\";\r",
											"pm.test('Firstname should be: Riina', function () {\r",
											"      pm.expect(body.firstname).to.equal(fName);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Riina\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only firstname. The other body parameter will not be set in body parameter. In such case the update should work perfectly and response should contian all the information of booking. The updated information should also be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with special character in firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a5f5fe4-ea99-4e53-a3ec-173c9b84b525",
										"exec": [
											"pm.test(\"If provide only special characters in firstname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"If provide only special characters in firstname, the status phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"If provide only special characters in firstname, response should contain: firstnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstnameInvalid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"#######################!¤%&/()=[]{}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only firstname. But in firstname only specaial character will be set. So the operation should not be succeeded and proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with empty firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59ccbd68-cffb-40c9-9be8-a21268cdebce",
										"exec": [
											"pm.test(\"For empty firstname, response  body should contain: firstnameIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstnameIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty firstname, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty firstname, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH requet to partially update with firstname and it should return proper error messsage. Empty firstname should not be allowed."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with large string in firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21647d47-0612-40e0-9466-743c726297ad",
										"exec": [
											"pm.test(\"For large input in firstname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For large input in firstname, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For large input in firstname, response should contain: firstnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstnameInvalid\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"firstname\" : \"Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon Jhon \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with large string in firstname. And there should have proper validation error message."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with only lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa0a624a-3349-4aa9-b9cc-b42f870d8e87",
										"exec": [
											"pm.test(\"For successful update response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For successful update response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											"\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"let lName=\"Nadal\";\r",
											"pm.test('Lastname should be: Nadal', function () {\r",
											"      pm.expect(body.lastname).to.equal(lName);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastname\" : \"Nadal\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only lastname. The other body parameter will not be set in body parameter. In such case the update should work perfectly and response should contian all the information of booking. The updated information should also be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with special character in lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63112402-60ed-464b-b493-039850137b32",
										"exec": [
											"pm.test(\"If provide only special characters in lastname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"If provide only special characters in lastname, the status phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"If provide only special characters in lastname, response should contain: lastnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastnameInvalid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastname\" : \"#######################!¤%&/()=[]{}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only lastname. But in lastname only specaial character will be set. So the operation should not be succeeded and proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with empty lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d98fee4-3f77-4cf4-820d-ac1588cd33d4",
										"exec": [
											"pm.test(\"For empty lastname, response  body should contain: lastnameIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastnameIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty lastname, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty lastname, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastname\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH requet to partially update with empty lastname and it should return proper error messsage. Empty lastname should not be allowed."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with large string in lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eff64aff-1667-4a9a-852b-4eb126c05e38",
										"exec": [
											"pm.test(\"For large input in lastname, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For large input in lastname, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For large input in lastname, response should contain: lastnameInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastnameInvalid\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"lastname\" : \"Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard Polard \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with large string in lastname. And there should have proper validation error message."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with only totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2a7989b-7508-4203-9cca-d12c809cf1fc",
										"exec": [
											"pm.test(\"For successful update response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For successful update response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											"\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"let totalPrice=564;\r",
											"pm.test('totalPrice should be: 564', function () {\r",
											"      pm.expect(body.totalprice).to.equal(totalPrice);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"totalprice\" : 564\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only totalprice. The other body parameter will not be set in body parameter. In such case the update should work perfectly and response should contian all the information ob booking. The updated information should also be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with empty totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9722a63-60dd-41e9-b716-091e832a64be",
										"exec": [
											"pm.test(\"For empty totalprice, response  body should contain: totalpriceIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalpriceIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty totalprice, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty totalprice, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"totalprice\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH requet to partially update with empty totalprice and it should return proper error messsage."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with floating value in totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9353e9a1-6c19-457e-9b9a-cfe87a056802",
										"exec": [
											"pm.test(\"For totalprice update with floating value, response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For totalprice update with floating value, response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For totalprice update with floating value, response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For totalprice update with floating value, response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For totalprice update with floating value, response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"For totalprice update with floating value, response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For totalprice update with floating value, response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For totalprice update with floating value, response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"const inputPrice = 120.65;\r",
											"  pm.test('Check if number is equal to input totalprice: 120.65', function () {\r",
											"      pm.expect(body.totalprice).to.equal(inputPrice);\r",
											"  });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"totalprice\" : 120.65\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update an existing id with floating value in totalprice.And this field should allow floating value. And in response body the same totalprice value should be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with negative value in totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83f5c6a4-2a8f-4fe4-9b72-3ce896dea5a2",
										"exec": [
											"pm.test(\"For negative totalprice, response body should contain: totalpriceInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalpriceInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For negative totalprice, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For negative totalprice, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"totalprice\" : -120\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/9",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"9"
									]
								},
								"description": "In this test case send PATCH request with negative number in totalprice. Negative number should not be allowed. And in response body proper error message should be found like \"totalpriceInvalid\"."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with alphanumeric value in totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b9c6d7b-f3ab-457a-9f68-bf1dad588491",
										"exec": [
											"pm.test(\"For alphanumeric value in  totalprice, response body should contain: totalpriceInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalpriceInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For alphanumeric value in totalprice, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For alphanumeric value in totalprice, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"totalprice\" : ABD778\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "In this test case send PATCH request to update existing booking id with alpha-numeric value like ABD778 in totalprice. Alpha-numeric number should not be allowed. And in response body proper error message should be found like \"totalpriceInvalid\"."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with larger value than:99999999999999980 in  totalprice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe7b5bce-143d-49c6-adc4-9963c094af61",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"  let largeInput = \"99999999999999981\";\r",
											"  pm.test('Check if number is equal to input totalprice: 99999999999999981', function () {\r",
											"      pm.expect(body.totalprice).to.equal(largeInput.toString());\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"totalprice\" : 99999999999999981\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will check the validation in totalprice field while partial update operation using PATCH method. This field accepts maximum value as:99999999999999980. But if provide 99999999999999981,the response returns totalprice: 99999999999999980. Either there should have proper error message or the same input should be found in response."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with only  depositpaid false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2068c31-5bbe-4aa2-bd41-6e963fb17ab0",
										"exec": [
											"pm.test(\"For successful update response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For successful update response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											"\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"let depositPaid=false;\r",
											"pm.test('depositPaid should be: false', function () {\r",
											"      pm.expect(body.depositpaid).to.equal(depositPaid);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"depositpaid\" : false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only depositpaid. Partial update should work perfectly and response should contian all the information of booking. The updated information should also be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with empty depositpaid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b60ab0c0-0499-4f8c-a1b5-de1b9881462d",
										"exec": [
											"pm.test(\"For empty depositpaid, response  body should contain: depositpaidIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaidIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty depositpaid, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty depositpaid, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"depositpaid\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH requet to partially update with empty depositpaid and it should return proper error messsage."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existingid with depositpaid false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81682505-2bd2-40b4-9567-65a7373f89b9",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.test(\"Response body should contain:: depositpaid:false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\\"depositpaid\\\":false\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"depositpaid\" : false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request with depositpaid: false. And it should partially update booking perfectly. The response should also return depositpaid: false."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with depositpaid 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aeafcedf-4121-439a-b1a1-aed0d9a48a5c",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.test(\"If use zero 0 instead of true in depositpaid, then also response contains:: depositpaid:false\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\\"depositpaid\\\":false\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"depositpaid\" : 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request with depositpaid: 0 and it should work properly. As zero 0 is treated as boolean false, so in response depositpaid:false should be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with depositpaid 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caa2b370-b362-4557-952f-47b604e0c43d",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.test(\"If use one 1 instead of true in depositpaid, then also response contains:: depositpaid:true\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"\\\"depositpaid\\\":true\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"depositpaid\" : 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request with depositpaid: 1 and it should work properly. As zero 1 is treated as boolean true, so in response depositpaid:true should be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with negative depositpaid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a889509e-477a-4d31-8381-c8f6aab39e91",
										"exec": [
											"pm.test(\"For negative depositpaid value, response body should contain: depositpaidInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositapaidInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For negative depositpaid value, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For negative depositpaid value, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"depositpaid\" : -1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request with depositpaid: -1 and it should not work properly. Need proper validatoin for this case like : depositpaidInvalid."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with depositpaid greater than 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a73c3b2e-5ac0-4909-9f9a-c98286c5ff09",
										"exec": [
											"pm.test(\"For any depositpaid value greater than 1, response body should contain: depositpaidInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositapaidInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For any depositpaid value greater than 1, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For any depositpaid value greater than 1 response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"depositpaid\" : 56\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request with depositpaid value greater than 1 like depositpaid: 45 and it should not work properly. Need proper validation for this case like : depositpaidInvalid."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with large string input in depositpaid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49e9e70f-4c30-4e7b-b491-481b8c9ac1a5",
										"exec": [
											"pm.test(\"For large string in depositpaid value, response body should contain: depositpaidInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositapaidInvalid\");\r",
											"});\r",
											"\r",
											"pm.test(\"For large string in depositpaid value, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For large string in depositpaid value, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "oken={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"depositpaid\" : one zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one fiveone zero one five \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request with large string as input value for depositpaid and it should not work properly. Need proper validation for this case like : depositpaidInvalid."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with only  checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2988a6fc-4c2c-4b9f-8151-f4ea4545f22c",
										"exec": [
											"pm.test(\"For successful update response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For successful update response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											"\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"let checkinDate=\"2019-10-10\";\r",
											"pm.test('checkinDate should be: 2019-10-10', function () {\r",
											"      pm.expect(body.bookingdates.checkin).to.equal(checkinDate);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-10\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only checkin. Partial update should work perfectly and response should contian all the information of booking. The updated information should also be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with empty checkin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb6ffc0f-5847-489e-930b-d59061222fa0",
										"exec": [
											"pm.test(\"For empty checkin, response  body should contain: checkinIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkinIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkin, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkin, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH requet to partially update with empty checkin and it should return proper error messsage."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with only  checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66a5cacf-0589-45cc-a422-54d35a3e96b4",
										"exec": [
											"pm.test(\"For successful update response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For successful update response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											"\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"let checkoutDate=\"2019-10-12\";\r",
											"pm.test('checkoutDate should be: 2019-10-12', function () {\r",
											"      pm.expect(body.bookingdates.checkout).to.equal(checkoutDate);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkout\" : \"2019-10-12\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only checkout. Partial update should work perfectly and response should contian all the information of booking. The updated information should also be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with empty checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90411a75-bdc3-4e33-9e72-e0b5c0180e49",
										"exec": [
											"pm.test(\"For empty checkout, response  body should contain: checkoutIsMissing\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkoutIsMissing\");\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkout, response status code should be 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"For empty checkout, response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkout\" : \"2019-10-12\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH requet to partially update with empty checkout and it should return proper error messsage."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with only additionalneeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07017a9c-9d9c-4efe-8d90-f7c746c6f449",
										"exec": [
											"pm.test(\"Response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"Response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"Response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"Response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"Response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"Response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"Response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"Response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalneeds\" : \"Two packets\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only additionalneeds. Partial update should work perfectly and response should contian all the information of booking. The updated information should also be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with checkin and checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d917c552-9bec-4936-b5d7-7673afa0ad92",
										"exec": [
											"pm.test(\"For successful update response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For successful update response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For successful update response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											"\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"let checkinDate=\"2019-09-10\";\r",
											"let checkoutDate=\"2019-11-12\";\r",
											"pm.test('checkinDate should be: 2019-09-10', function () {\r",
											"      pm.expect(body.bookingdates.checkin).to.equal(checkinDate);\r",
											"  });\r",
											"\r",
											"  pm.test('checkoutDate should be: 2019-11-12', function () {\r",
											"      pm.expect(body.bookingdates.checkout).to.equal(checkoutDate);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"2019-09-10\",\r\n        \"checkout\" : \"2019-11-12\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with only checkin and checkout. The other body parameter will not be set in body parameter. In such case the update should work perfectly and response should contian all the information of booking."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with empty checkin and checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bba7ca8d-0a93-4916-bae2-31bac2fa928e",
										"exec": [
											"pm.test(\"Response body should contain: Invalid date \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});\r",
											"\r",
											"var body = JSON.parse(responseBody); \r",
											"var todaysDate = new Date().toISOString().split('T')[0];\r",
											"pm.test('Checkin is set with todays date:'+todaysDate, function () {\r",
											"      pm.expect(body.bookingdates.checkin).to.equal(todaysDate);\r",
											"  });\r",
											"pm.test('Checkout is set with todays:'+todaysDate, function () {\r",
											"      pm.expect(body.bookingdates.checkout).to.equal(todaysDate);\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"\",\r\n        \"checkout\" : \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with empty checkin and checkout. In that case proper error message should be found like : Invalid Date."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with invalid date month in checkin checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ba04768-51d7-4117-a3d4-6742e9ff91ef",
										"exec": [
											"pm.test(\"Body should matche string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"2019-12-34\",\r\n        \"checkout\" : \"2019-22-04\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with invalid value in date month portion of checkin and checkout. In that case proper error message should be found like : Invalid Date."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with invalid data in checkin checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a73e3b3-3ec0-430f-8f6c-668ea1c61724",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"ASDFG\",\r\n        \"checkout\" : \"2019545FD\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with invalid data in checkin and checkout. In that case proper error message should be found like : Invalid Date."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with checkin checkout value 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd7b386e-6035-4d58-b63c-f0402eb9d417",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"0\",\r\n        \"checkout\" : \"0\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon 0 in checkin and checkout. In that case proper error message should be found like : Invalid Date."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with checkin checkout value 1 to 12",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19878fa9-39c7-4edc-9b64-1bc395ee858d",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"2\",\r\n        \"checkout\" : \"10\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with checkin and checkout between 1 to 12. In that case proper error message should be found like : Invalid Date."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with checkin checkout value 13 to 31",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14aec164-0048-4565-869c-2f34f5abaa2b",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"16\",\r\n        \"checkout\" : \"28\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with checkin and checkout between 13 to 31. In that case proper error message should be found like : Invalid Date."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with checkin checkout value 32 to 49",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a76fed8f-bd70-49fe-b9b0-9dc7af4e7b6e",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"36\",\r\n        \"checkout\" : \"38\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with checkin and checkout between 32 to 49. In that case proper error message should be found like : Invalid Date."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with checkin checkout value 50 to 99",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c38b6c82-4fc0-4fab-a8ce-9b2280af2618",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"56\",\r\n        \"checkout\" : \"78\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with checkin and checkout between 50 to 99. In that case proper error message should be found like : Invalid Date."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with bigger checkin than checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6890f48d-8ac3-4503-806f-c18e0f933b15",
										"exec": [
											"pm.test(\"As checkout is smaller than checkin so, response should be: checkoutShouldBeGreaterOrEqualToCheckin \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkoutShouldBeGreaterOrEqualToCheckin\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"2019-11-18\",\r\n        \"checkout\" : \"2019-10-09\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request with bigger checkin value than checkout. Checkin value should be smaller or euqal to checkout. So in this test case the booking should not be created and should get proper error response."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with three digit checkin checkout value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1db6497-a3fc-4fb0-90db-b9e04357da86",
										"exec": [
											"pm.test(\"Body matches string: Invalid date\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid date\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"344\",\r\n        \"checkout\" : \"745\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request with three-digit integer in checkin checkout field. Without CCYY-MM-DD format no other format should be allowed. So if set any value like 245,488 or like this, then proper error message should be found."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with same checkin checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d60e3e4-c4b5-409d-87df-7c987103999e",
										"exec": [
											"pm.test(\"For same checkin checkout, response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"For same checkin checkout, response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"For same checkin checkout, response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"For same checkin checkout, response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"For same checkin checkout, response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"For same checkin checkout, response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"For same checkin checkout, response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"For same checkin checkout, response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"bookingdates\" : {\r\n        \"checkin\" : \"2020-03-09\",\r\n        \"checkout\" : \"2020-03-09\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request with same checkin checkout. So in this test case the booking should updated."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with large string input in additionalneeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8f5ab7a-3c8d-4967-b761-1f328032bb8a",
										"exec": [
											"pm.test(\"For large input in additionalneeds, the status code should be: 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"For large input in additionalneeds, the status code should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"For large input in additionalneeds, response should contain: additionalneedsInvalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneedsInvalid\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalneeds\" : \"Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets Two packets \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "In this test the PATCH request will be sent with large string in additionalneeds parameter but all otehr parameter values are perfect. This test should fail and return proper error message for incorrect validation in additionalneeds field."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with empty additionalneeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e3a7048-fd03-4e0b-8a71-7a4d926582fe",
										"exec": [
											"pm.test(\"Response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"Response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"Response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"Response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"Response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"Response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"Response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"Response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalneeds\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to update with empty additionalneeds. Additional need value is not mandatory(during create booking we found that without additionalneeds, a booking can be created). So pdate will work and respone will return all information of booking."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with checkin, checkout and additinalneeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c13dd4f-3f85-4e3a-8d76-c0f812a4faa8",
										"exec": [
											"pm.test(\"Response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"Response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"Response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"Response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"Response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"Response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"Response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"Response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-10\",\r\n        \"checkout\" : \"2019-12-12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with cehckin cehckout and additionalneeds. The other body parameter will not be set in body parameter. In such case the update should work perfectly and response should contian all the information of booking."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with lastname, totalprice and depositpaid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0a1345f-0b53-4964-af3f-664194fd4527",
										"exec": [
											"pm.test(\"Response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"Response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"Response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"Response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"Response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"Response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"Response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"Response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 110,\r\n    \"depositpaid\" : 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with lastname, totalprice and depositpaid. The other body parameter will not be set in body parameter. In such case the update should work perfectly and response should contian all the information of booking."
							},
							"response": []
						},
						{
							"name": "Partial Update Booking of existing id with totalprice, depositpaid and checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e845ffb5-5ecf-4b5f-a3fe-99d18989152a",
										"exec": [
											"pm.test(\"Response body contains: firstname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
											"});pm.test(\"Response body contains: lastname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
											"});\r",
											"pm.test(\"Response body contains: totalprice\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
											"});\r",
											"pm.test(\"Response body contains: depositpaid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"depositpaid\");\r",
											"});\r",
											"pm.test(\"Response body contains: bookingdates\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"bookingdates\");\r",
											"});\r",
											"pm.test(\"Response body contains: checkin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkin\");\r",
											"});\r",
											"pm.test(\"Response body contains: checkout\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"checkout\");\r",
											"});\r",
											"pm.test(\"Response body contains: additionalneeds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"additionalneeds\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"totalprice\" : 110,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkout\" : \"2019-12-12\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case will send PATCH request to partially update booking informatioon with totalprice, depositpaid and cehckout. The other body parameter will not be set in body parameter. In such case the update should work perfectly and response should contian all the information of booking."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fd423e56-ec92-4fa2-9d0d-28ba88935f0c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "49e959e9-4d9a-4406-8ef6-3f9614235d8c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Booking",
					"item": [
						{
							"name": "Delete Booking of existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ee70600-8b6b-49c4-94a9-41417b71ce1a",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"\r",
											"//for best practice the status code and the response should be as follows if Delete successful.\r",
											"pm.test(\"For best practice, status code should be 200 if delete successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"For best practice, status code name has string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id}}"
									]
								},
								"description": "This test case send DELETE request for an existing booking id. Booking id will be passed through url. After successful deletion proper message should be found."
							},
							"response": []
						},
						{
							"name": "01.Create Booking to test delete next delete operation",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 110,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-10\",\r\n        \"checkout\" : \"2019-12-12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Booking of existing id without cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48aa65f8-00cd-4729-89b7-a70c42137a3e",
										"exec": [
											"pm.test(\"Status code should be 200 \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}",
										"disabled": true
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id01}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id01}}"
									]
								},
								"description": "This test case send DELETE request for an existing booking id without cookie.As cookie is optional so delete should work. Booking id will be passed through url. After successful deletion proper message should be found."
							},
							"response": []
						},
						{
							"name": "02.Create Booking to test  delete on next operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3b6f873-50f7-4427-a80f-54b14be5aa1c",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.environment.set(\"id02\", body.bookingid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 110,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-10\",\r\n        \"checkout\" : \"2019-12-12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Booking of existing id with wrong cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cb8bc38-ebc4-45d9-b72d-1d23fc25ab84",
										"exec": [
											"pm.test(\"Status code should be 200 \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name should have string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "45435345FDSFSFWE"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123"
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id02}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id02}}"
									]
								},
								"description": "This test case send DELETE request for an existing booking id with wrong cookie.As cookie is optional so delete should work. Booking id will be passed through url. After successful deletion proper message should be found."
							},
							"response": []
						},
						{
							"name": "03.Create Booking to test  delete on next operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9268b76-bcda-418f-b588-d2a27434d923",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.environment.set(\"id03\", body.bookingid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 110,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-10\",\r\n        \"checkout\" : \"2019-12-12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Booking of existing id without authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4853b67d-11a2-4619-b5b2-e7c29c7f0e3a",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
											"\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"For best practice, status code should be 200 if delete successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"For best practice, status code name should have string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"value": "Basic admin:password123",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id03}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id03}}"
									]
								},
								"description": "This test case send DELETE request for an existing booking id without authorisation.As cookie is optional so delete should work. Booking id will be passed through url. After successful deletion proper message should be found."
							},
							"response": []
						},
						{
							"name": "04.Create Booking to test  delete on next operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c68f11f-2dda-4dc8-a9bc-61d4d5b19a77",
										"exec": [
											"var body = JSON.parse(responseBody); \r",
											"pm.environment.set(\"id04\", body.bookingid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jhon\",\r\n    \"lastname\" : \"wick\",\r\n    \"totalprice\" : 110,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2019-10-10\",\r\n        \"checkout\" : \"2019-12-12\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Booking of existing id with wrong authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52b1f0d6-b845-410a-a695-901db02343af",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"For best practice, status code should be 200 if delete successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"For best practice, status code name should havve string: OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "token={{token}}"
									},
									{
										"key": "Authorisation",
										"type": "text",
										"value": "Basic admin:password123435345"
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{id04}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{id04}}"
									]
								},
								"description": "This test case send DELETE request for an existing booking id with wrong authorisation.As cookie is optional so delete should work. Booking id will be passed through url. After successful deletion proper message should be found."
							},
							"response": []
						},
						{
							"name": "Delete Booking of non-existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5227a343-ed12-4b2b-8931-887dbd0280c5",
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"pm.test(\"Body matches string: Method Not Allowed\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});\r",
											"pm.test(\"Status code name has string: Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/984238",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"984238"
									]
								},
								"description": "This test case send DELETE request for a non-existing booking id. So delete operation will be failled and proper error should be found in response."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cbc1862a-2f18-4226-a92a-5426c06f5fc0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dced927d-c0d1-4420-9dca-4712ffe6d289",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "62aa440c-e6f6-4792-8364-f35bdbce29bf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "229e2db4-9e62-42bd-918f-2910e0e34bd8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}